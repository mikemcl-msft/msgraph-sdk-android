// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.generated;

import com.microsoft.graph.concurrency.*;
import com.microsoft.graph.core.*;
import com.microsoft.graph.extensions.*;
import com.microsoft.graph.http.*;
import com.microsoft.graph.generated.*;
import com.microsoft.graph.options.*;
import com.microsoft.graph.serializer.*;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.JsonObject;
import com.google.gson.annotations.*;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Base Notebook.
 */
public class BaseNotebook extends Entity implements IJsonBackedObject {


    public BaseNotebook() {
        oDataType = "microsoft.graph.notebook";
    }

    /**
     * The Is Default.
     */
    @SerializedName("isDefault")
    @Expose
    public Boolean isDefault;

    /**
     * The User Role.
     */
    @SerializedName("userRole")
    @Expose
    public UserRole userRole;

    /**
     * The Is Shared.
     */
    @SerializedName("isShared")
    @Expose
    public Boolean isShared;

    /**
     * The Sections Url.
     */
    @SerializedName("sectionsUrl")
    @Expose
    public String sectionsUrl;

    /**
     * The Section Groups Url.
     */
    @SerializedName("sectionGroupsUrl")
    @Expose
    public String sectionGroupsUrl;

    /**
     * The Links.
     */
    @SerializedName("links")
    @Expose
    public NotebookLinks links;

    /**
     * The Name.
     */
    @SerializedName("name")
    @Expose
    public String name;

    /**
     * The Created By.
     */
    @SerializedName("createdBy")
    @Expose
    public String createdBy;

    /**
     * The Created By Identity.
     */
    @SerializedName("createdByIdentity")
    @Expose
    public OneNoteIdentitySet createdByIdentity;

    /**
     * The Last Modified By.
     */
    @SerializedName("lastModifiedBy")
    @Expose
    public String lastModifiedBy;

    /**
     * The Last Modified By Identity.
     */
    @SerializedName("lastModifiedByIdentity")
    @Expose
    public OneNoteIdentitySet lastModifiedByIdentity;

    /**
     * The Last Modified Time.
     */
    @SerializedName("lastModifiedTime")
    @Expose
    public java.util.Calendar lastModifiedTime;

    /**
     * The Self.
     */
    @SerializedName("self")
    @Expose
    public String self;

    /**
     * The Created Time.
     */
    @SerializedName("createdTime")
    @Expose
    public java.util.Calendar createdTime;

    /**
     * The Sections.
     */
    public transient SectionCollectionPage sections;

    /**
     * The Section Groups.
     */
    public transient SectionGroupCollectionPage sectionGroups;


    /**
     * The raw representation of this class
     */
    private transient JsonObject mRawObject;

    /**
     * The serializer
     */
    private transient ISerializer mSerializer;

    /**
     * Gets the raw representation of this class
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return mRawObject;
    }

    /**
     * Gets serializer
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return mSerializer;
    }

    /**
     * Sets the raw json object
     *
     * @param serializer The serializer
     * @param json The json object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        mSerializer = serializer;
        mRawObject = json;


        if (json.has("sections")) {
            final BaseSectionCollectionResponse response = new BaseSectionCollectionResponse();
            if (json.has("sections@odata.nextLink")) {
                response.nextLink = json.get("sections@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("sections").toString(), JsonObject[].class);
            final Section[] array = new Section[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Section.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            sections = new SectionCollectionPage(response, null);
        }

        if (json.has("sectionGroups")) {
            final BaseSectionGroupCollectionResponse response = new BaseSectionGroupCollectionResponse();
            if (json.has("sectionGroups@odata.nextLink")) {
                response.nextLink = json.get("sectionGroups@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("sectionGroups").toString(), JsonObject[].class);
            final SectionGroup[] array = new SectionGroup[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), SectionGroup.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            sectionGroups = new SectionGroupCollectionPage(response, null);
        }
    }
}
