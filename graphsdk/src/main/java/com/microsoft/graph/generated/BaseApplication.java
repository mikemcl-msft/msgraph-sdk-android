// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.generated;

import com.microsoft.graph.concurrency.*;
import com.microsoft.graph.core.*;
import com.microsoft.graph.extensions.*;
import com.microsoft.graph.http.*;
import com.microsoft.graph.generated.*;
import com.microsoft.graph.options.*;
import com.microsoft.graph.serializer.*;

import java.util.Arrays;
import java.util.List;

import com.google.gson.JsonObject;
import com.google.gson.annotations.*;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Base Application.
 */
public class BaseApplication extends DirectoryObject implements IJsonBackedObject {


    public BaseApplication() {
        oDataType = "microsoft.graph.application";
    }

    /**
     * The Add Ins.
     */
    @SerializedName("addIns")
    public List<AddIn> addIns;

    /**
     * The App Id.
     */
    @SerializedName("appId")
    public String appId;

    /**
     * The App Roles.
     */
    @SerializedName("appRoles")
    public List<AppRole> appRoles;

    /**
     * The Available To Other Organizations.
     */
    @SerializedName("availableToOtherOrganizations")
    public Boolean availableToOtherOrganizations;

    /**
     * The Display Name.
     */
    @SerializedName("displayName")
    public String displayName;

    /**
     * The Error Url.
     */
    @SerializedName("errorUrl")
    public String errorUrl;

    /**
     * The Group Membership Claims.
     */
    @SerializedName("groupMembershipClaims")
    public String groupMembershipClaims;

    /**
     * The Homepage.
     */
    @SerializedName("homepage")
    public String homepage;

    /**
     * The Identifier Uris.
     */
    @SerializedName("identifierUris")
    public List<String> identifierUris;

    /**
     * The Key Credentials.
     */
    @SerializedName("keyCredentials")
    public List<KeyCredential> keyCredentials;

    /**
     * The Known Client Applications.
     */
    @SerializedName("knownClientApplications")
    public List<java.util.UUID> knownClientApplications;

    /**
     * The Logout Url.
     */
    @SerializedName("logoutUrl")
    public String logoutUrl;

    /**
     * The Oauth2Allow Implicit Flow.
     */
    @SerializedName("oauth2AllowImplicitFlow")
    public Boolean oauth2AllowImplicitFlow;

    /**
     * The Oauth2Allow Url Path Matching.
     */
    @SerializedName("oauth2AllowUrlPathMatching")
    public Boolean oauth2AllowUrlPathMatching;

    /**
     * The Oauth2Permissions.
     */
    @SerializedName("oauth2Permissions")
    public List<OAuth2Permission> oauth2Permissions;

    /**
     * The Oauth2Require Post Response.
     */
    @SerializedName("oauth2RequirePostResponse")
    public Boolean oauth2RequirePostResponse;

    /**
     * The Password Credentials.
     */
    @SerializedName("passwordCredentials")
    public List<PasswordCredential> passwordCredentials;

    /**
     * The Public Client.
     */
    @SerializedName("publicClient")
    public Boolean publicClient;

    /**
     * The Record Consent Conditions.
     */
    @SerializedName("recordConsentConditions")
    public String recordConsentConditions;

    /**
     * The Reply Urls.
     */
    @SerializedName("replyUrls")
    public List<String> replyUrls;

    /**
     * The Required Resource Access.
     */
    @SerializedName("requiredResourceAccess")
    public List<RequiredResourceAccess> requiredResourceAccess;

    /**
     * The Saml Metadata Url.
     */
    @SerializedName("samlMetadataUrl")
    public String samlMetadataUrl;

    /**
     * The Extension Properties.
     */
    public transient ExtensionPropertyCollectionPage extensionProperties;

    /**
     * The Created On Behalf Of.
     */
    @SerializedName("createdOnBehalfOf")
    public DirectoryObject createdOnBehalfOf;

    /**
     * The Owners.
     */
    public transient DirectoryObjectCollectionPage owners;


    /**
     * The raw representation of this class
     */
    private transient JsonObject mRawObject;

    /**
     * The serializer
     */
    private transient ISerializer mSerializer;

    /**
     * Gets the raw representation of this class
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return mRawObject;
    }

    /**
     * Gets serializer
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return mSerializer;
    }

    /**
     * Sets the raw json object
     *
     * @param serializer The serializer
     * @param json The json object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        mSerializer = serializer;
        mRawObject = json;


        if (json.has("extensionProperties")) {
            final BaseExtensionPropertyCollectionResponse response = new BaseExtensionPropertyCollectionResponse();
            if (json.has("extensionProperties@odata.nextLink")) {
                response.nextLink = json.get("extensionProperties@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("extensionProperties").toString(), JsonObject[].class);
            final ExtensionProperty[] array = new ExtensionProperty[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), ExtensionProperty.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            extensionProperties = new ExtensionPropertyCollectionPage(response, null);
        }

        if (json.has("owners")) {
            final BaseDirectoryObjectCollectionResponse response = new BaseDirectoryObjectCollectionResponse();
            if (json.has("owners@odata.nextLink")) {
                response.nextLink = json.get("owners@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("owners").toString(), JsonObject[].class);
            final DirectoryObject[] array = new DirectoryObject[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), DirectoryObject.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            owners = new DirectoryObjectCollectionPage(response, null);
        }
    }
}
