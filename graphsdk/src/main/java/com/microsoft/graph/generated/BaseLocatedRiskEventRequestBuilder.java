// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.generated;

import com.microsoft.graph.concurrency.*;
import com.microsoft.graph.core.*;
import com.microsoft.graph.extensions.*;
import com.microsoft.graph.http.*;
import com.microsoft.graph.generated.*;
import com.microsoft.graph.options.*;
import com.microsoft.graph.serializer.*;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Base Located Risk Event Request Builder.
 */
public class BaseLocatedRiskEventRequestBuilder extends BaseRequestBuilder implements IBaseLocatedRiskEventRequestBuilder {

    /**
     * The request builder for the LocatedRiskEvent
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param requestOptions The options for this request
     */
    public BaseLocatedRiskEventRequestBuilder(final String requestUrl, final IBaseClient client, final List<Option> requestOptions) {
        super(requestUrl, client, requestOptions);
    }

    /**
     * Creates the request
     */
    public ILocatedRiskEventRequest buildRequest() {
        return buildRequest(getOptions());
    }

    /**
     * Creates the request with specific requestOptions instead of the existing requestOptions
     */
    public ILocatedRiskEventRequest buildRequest(final List<Option> requestOptions) {
        return new LocatedRiskEventRequest(getRequestUrl(), getClient(), requestOptions);
    }


    public IImpossibleTravelRiskEventRequestBuilder impossibleTravelRiskEvent() {
        return new ImpossibleTravelRiskEventRequestBuilder(getRequestUrlWithAdditionalSegment("impossibleTravelRiskEvent"), getClient(), null);
    }

    public IAnonymousIpRiskEventRequestBuilder anonymousIpRiskEvent() {
        return new AnonymousIpRiskEventRequestBuilder(getRequestUrlWithAdditionalSegment("anonymousIpRiskEvent"), getClient(), null);
    }

    public ISuspiciousIpRiskEventRequestBuilder suspiciousIpRiskEvent() {
        return new SuspiciousIpRiskEventRequestBuilder(getRequestUrlWithAdditionalSegment("suspiciousIpRiskEvent"), getClient(), null);
    }

    public IUnfamiliarLocationRiskEventRequestBuilder unfamiliarLocationRiskEvent() {
        return new UnfamiliarLocationRiskEventRequestBuilder(getRequestUrlWithAdditionalSegment("unfamiliarLocationRiskEvent"), getClient(), null);
    }

    public IMalwareRiskEventRequestBuilder malwareRiskEvent() {
        return new MalwareRiskEventRequestBuilder(getRequestUrlWithAdditionalSegment("malwareRiskEvent"), getClient(), null);
    }
}
