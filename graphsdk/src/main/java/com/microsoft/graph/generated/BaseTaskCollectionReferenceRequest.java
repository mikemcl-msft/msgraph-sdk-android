// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.
package com.microsoft.graph.generated;

import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.extensions.ITaskCollectionPage;
import com.microsoft.graph.extensions.ITaskCollectionReferenceRequest;
import com.microsoft.graph.extensions.Task;
import com.microsoft.graph.extensions.TaskCollectionReferenceRequest;
import com.microsoft.graph.extensions.TaskWithReferenceRequestBuilder;
import com.microsoft.graph.http.BaseCollectionRequest;
import com.microsoft.graph.http.ReferenceRequestBody;
import com.microsoft.graph.options.Option;
import com.microsoft.graph.options.QueryOption;

import java.util.List;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Base Task Collection Reference Request.
 */
public class BaseTaskCollectionReferenceRequest extends BaseCollectionRequest<BaseTaskCollectionResponse, ITaskCollectionPage> implements IBaseTaskCollectionReferenceRequest {

    /**
     * The request builder for this collection of Task
     *
     * @param requestUrl The request url
     * @param client The service client
     * @param options The options for this request
     */
    public BaseTaskCollectionReferenceRequest(final String requestUrl, IBaseClient client, final List<Option> options) {
        super(requestUrl, client, options, BaseTaskCollectionResponse.class, ITaskCollectionPage.class);
    }

    public void post(final Task newTask, final ICallback<Task> callback) {
        final String requestUrl = getBaseRequest().getRequestUrl().toString();
        final ReferenceRequestBody body = new ReferenceRequestBody(getBaseRequest().getClient().getServiceRoot() + "/tasks/" + newTask.id);
        new TaskWithReferenceRequestBuilder(requestUrl, getBaseRequest().getClient(), /* Options */ null)
            .buildRequest()
            .post(newTask, body, callback);
    }

    public Task post(final Task newTask) throws ClientException {
        final String requestUrl = getBaseRequest().getRequestUrl().toString();
        final ReferenceRequestBody body = new ReferenceRequestBody(getBaseRequest().getClient().getServiceRoot() + "/tasks/" + newTask.id);
        return new TaskWithReferenceRequestBuilder(requestUrl,getBaseRequest().getClient(), /* Options */ null)
                .buildRequest()
                .post(newTask, body);
    }

    /**
     * Sets the expand clause for the request
     *
     * @param value The expand clause
     * @return The updated request
     */
    public ITaskCollectionReferenceRequest expand(final String value) {
        addQueryOption(new QueryOption("$expand", value));
        return (TaskCollectionReferenceRequest)this;
    }

    /**
     * Sets the select clause for the request
     *
     * @param value The select clause
     * @return The updated request
     */
    public ITaskCollectionReferenceRequest select(final String value) {
        addQueryOption(new QueryOption("$select", value));
        return (TaskCollectionReferenceRequest)this;
    }

    /**
     * Sets the top value for the request
     *
     * @param value The max number of items to return
     * @return The updated request
     */
    public ITaskCollectionReferenceRequest top(final int value) {
        addQueryOption(new QueryOption("$top", value + ""));
        return (TaskCollectionReferenceRequest)this;
    }
}
