// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.generated;

import com.microsoft.graph.concurrency.*;
import com.microsoft.graph.core.*;
import com.microsoft.graph.extensions.*;
import com.microsoft.graph.http.*;
import com.microsoft.graph.generated.*;
import com.microsoft.graph.options.*;
import com.microsoft.graph.serializer.*;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The interface for the Base Graph Service Client.
 */
public interface IBaseGraphServiceClient extends IBaseClient {

    /**
     * Gets the collection of DirectoryObjects objects.
     *
     * @return The request builder for the collection of DirectoryObjects objects
     */
    IDirectoryObjectCollectionRequestBuilder getDirectoryObjects();

    /**
     * Gets a single DirectoryObjects.
     *
     * @param id The id of the DirectoryObjects to retrieve.
     * @return The request builder for the DirectoryObjects object
     */
    IDirectoryObjectRequestBuilder getDirectoryObjects(final String id);

    /**
     * Gets the collection of Applications objects.
     *
     * @return The request builder for the collection of Applications objects
     */
    IApplicationCollectionRequestBuilder getApplications();

    /**
     * Gets a single Applications.
     *
     * @param id The id of the Applications to retrieve.
     * @return The request builder for the Applications object
     */
    IApplicationRequestBuilder getApplications(final String id);

    /**
     * Gets the collection of AdministrativeUnits objects.
     *
     * @return The request builder for the collection of AdministrativeUnits objects
     */
    IAdministrativeUnitCollectionRequestBuilder getAdministrativeUnits();

    /**
     * Gets a single AdministrativeUnits.
     *
     * @param id The id of the AdministrativeUnits to retrieve.
     * @return The request builder for the AdministrativeUnits object
     */
    IAdministrativeUnitRequestBuilder getAdministrativeUnits(final String id);

    /**
     * Gets the collection of AppRoleAssignments objects.
     *
     * @return The request builder for the collection of AppRoleAssignments objects
     */
    IAppRoleAssignmentCollectionRequestBuilder getAppRoleAssignments();

    /**
     * Gets a single AppRoleAssignments.
     *
     * @param id The id of the AppRoleAssignments to retrieve.
     * @return The request builder for the AppRoleAssignments object
     */
    IAppRoleAssignmentRequestBuilder getAppRoleAssignments(final String id);

    /**
     * Gets the collection of Contacts objects.
     *
     * @return The request builder for the collection of Contacts objects
     */
    IOrgContactCollectionRequestBuilder getContacts();

    /**
     * Gets a single Contacts.
     *
     * @param id The id of the Contacts to retrieve.
     * @return The request builder for the Contacts object
     */
    IOrgContactRequestBuilder getContacts(final String id);

    /**
     * Gets the collection of Devices objects.
     *
     * @return The request builder for the collection of Devices objects
     */
    IDeviceCollectionRequestBuilder getDevices();

    /**
     * Gets a single Devices.
     *
     * @param id The id of the Devices to retrieve.
     * @return The request builder for the Devices object
     */
    IDeviceRequestBuilder getDevices(final String id);

    /**
     * Gets the collection of Groups objects.
     *
     * @return The request builder for the collection of Groups objects
     */
    IGroupCollectionRequestBuilder getGroups();

    /**
     * Gets a single Groups.
     *
     * @param id The id of the Groups to retrieve.
     * @return The request builder for the Groups object
     */
    IGroupRequestBuilder getGroups(final String id);

    /**
     * Gets the collection of DirectoryRoles objects.
     *
     * @return The request builder for the collection of DirectoryRoles objects
     */
    IDirectoryRoleCollectionRequestBuilder getDirectoryRoles();

    /**
     * Gets a single DirectoryRoles.
     *
     * @param id The id of the DirectoryRoles to retrieve.
     * @return The request builder for the DirectoryRoles object
     */
    IDirectoryRoleRequestBuilder getDirectoryRoles(final String id);

    /**
     * Gets the collection of DirectoryRoleTemplates objects.
     *
     * @return The request builder for the collection of DirectoryRoleTemplates objects
     */
    IDirectoryRoleTemplateCollectionRequestBuilder getDirectoryRoleTemplates();

    /**
     * Gets a single DirectoryRoleTemplates.
     *
     * @param id The id of the DirectoryRoleTemplates to retrieve.
     * @return The request builder for the DirectoryRoleTemplates object
     */
    IDirectoryRoleTemplateRequestBuilder getDirectoryRoleTemplates(final String id);

    /**
     * Gets the collection of DirectorySettingTemplates objects.
     *
     * @return The request builder for the collection of DirectorySettingTemplates objects
     */
    IDirectorySettingTemplateCollectionRequestBuilder getDirectorySettingTemplates();

    /**
     * Gets a single DirectorySettingTemplates.
     *
     * @param id The id of the DirectorySettingTemplates to retrieve.
     * @return The request builder for the DirectorySettingTemplates object
     */
    IDirectorySettingTemplateRequestBuilder getDirectorySettingTemplates(final String id);

    /**
     * Gets the collection of Organization objects.
     *
     * @return The request builder for the collection of Organization objects
     */
    IOrganizationCollectionRequestBuilder getOrganization();

    /**
     * Gets a single Organization.
     *
     * @param id The id of the Organization to retrieve.
     * @return The request builder for the Organization object
     */
    IOrganizationRequestBuilder getOrganization(final String id);

    /**
     * Gets the collection of Oauth2PermissionGrants objects.
     *
     * @return The request builder for the collection of Oauth2PermissionGrants objects
     */
    IOAuth2PermissionGrantCollectionRequestBuilder getOauth2PermissionGrants();

    /**
     * Gets a single Oauth2PermissionGrants.
     *
     * @param id The id of the Oauth2PermissionGrants to retrieve.
     * @return The request builder for the Oauth2PermissionGrants object
     */
    IOAuth2PermissionGrantRequestBuilder getOauth2PermissionGrants(final String id);

    /**
     * Gets the collection of ScopedRoleMemberships objects.
     *
     * @return The request builder for the collection of ScopedRoleMemberships objects
     */
    IScopedRoleMembershipCollectionRequestBuilder getScopedRoleMemberships();

    /**
     * Gets a single ScopedRoleMemberships.
     *
     * @param id The id of the ScopedRoleMemberships to retrieve.
     * @return The request builder for the ScopedRoleMemberships object
     */
    IScopedRoleMembershipRequestBuilder getScopedRoleMemberships(final String id);

    /**
     * Gets the collection of ServicePrincipals objects.
     *
     * @return The request builder for the collection of ServicePrincipals objects
     */
    IServicePrincipalCollectionRequestBuilder getServicePrincipals();

    /**
     * Gets a single ServicePrincipals.
     *
     * @param id The id of the ServicePrincipals to retrieve.
     * @return The request builder for the ServicePrincipals object
     */
    IServicePrincipalRequestBuilder getServicePrincipals(final String id);

    /**
     * Gets the collection of Settings objects.
     *
     * @return The request builder for the collection of Settings objects
     */
    IDirectorySettingCollectionRequestBuilder getSettings();

    /**
     * Gets a single Settings.
     *
     * @param id The id of the Settings to retrieve.
     * @return The request builder for the Settings object
     */
    IDirectorySettingRequestBuilder getSettings(final String id);

    /**
     * Gets the collection of SubscribedSkus objects.
     *
     * @return The request builder for the collection of SubscribedSkus objects
     */
    ISubscribedSkuCollectionRequestBuilder getSubscribedSkus();

    /**
     * Gets a single SubscribedSkus.
     *
     * @param id The id of the SubscribedSkus to retrieve.
     * @return The request builder for the SubscribedSkus object
     */
    ISubscribedSkuRequestBuilder getSubscribedSkus(final String id);

    /**
     * Gets the collection of Users objects.
     *
     * @return The request builder for the collection of Users objects
     */
    IUserCollectionRequestBuilder getUsers();

    /**
     * Gets a single Users.
     *
     * @param id The id of the Users to retrieve.
     * @return The request builder for the Users object
     */
    IUserRequestBuilder getUsers(final String id);

    /**
     * Gets the collection of Policies objects.
     *
     * @return The request builder for the collection of Policies objects
     */
    IPolicyCollectionRequestBuilder getPolicies();

    /**
     * Gets a single Policies.
     *
     * @param id The id of the Policies to retrieve.
     * @return The request builder for the Policies object
     */
    IPolicyRequestBuilder getPolicies(final String id);

    /**
     * Gets the collection of Workbooks objects.
     *
     * @return The request builder for the collection of Workbooks objects
     */
    IDriveItemCollectionRequestBuilder getWorkbooks();

    /**
     * Gets a single Workbooks.
     *
     * @param id The id of the Workbooks to retrieve.
     * @return The request builder for the Workbooks object
     */
    IDriveItemRequestBuilder getWorkbooks(final String id);

    /**
     * Gets the collection of Drives objects.
     *
     * @return The request builder for the collection of Drives objects
     */
    IDriveCollectionRequestBuilder getDrives();

    /**
     * Gets a single Drives.
     *
     * @param id The id of the Drives to retrieve.
     * @return The request builder for the Drives object
     */
    IDriveRequestBuilder getDrives(final String id);

    /**
     * Gets the collection of Shares objects.
     *
     * @return The request builder for the collection of Shares objects
     */
    ISharedDriveItemCollectionRequestBuilder getShares();

    /**
     * Gets a single Shares.
     *
     * @param id The id of the Shares to retrieve.
     * @return The request builder for the Shares object
     */
    ISharedDriveItemRequestBuilder getShares(final String id);

    /**
     * Gets the collection of Tasks objects.
     *
     * @return The request builder for the collection of Tasks objects
     */
    ITaskCollectionRequestBuilder getTasks();

    /**
     * Gets a single Tasks.
     *
     * @param id The id of the Tasks to retrieve.
     * @return The request builder for the Tasks object
     */
    ITaskRequestBuilder getTasks(final String id);

    /**
     * Gets the collection of Plans objects.
     *
     * @return The request builder for the collection of Plans objects
     */
    IPlanCollectionRequestBuilder getPlans();

    /**
     * Gets a single Plans.
     *
     * @param id The id of the Plans to retrieve.
     * @return The request builder for the Plans object
     */
    IPlanRequestBuilder getPlans(final String id);

    /**
     * Gets the collection of Buckets objects.
     *
     * @return The request builder for the collection of Buckets objects
     */
    IBucketCollectionRequestBuilder getBuckets();

    /**
     * Gets a single Buckets.
     *
     * @param id The id of the Buckets to retrieve.
     * @return The request builder for the Buckets object
     */
    IBucketRequestBuilder getBuckets(final String id);

    /**
     * Gets the collection of Subscriptions objects.
     *
     * @return The request builder for the collection of Subscriptions objects
     */
    ISubscriptionCollectionRequestBuilder getSubscriptions();

    /**
     * Gets a single Subscriptions.
     *
     * @param id The id of the Subscriptions to retrieve.
     * @return The request builder for the Subscriptions object
     */
    ISubscriptionRequestBuilder getSubscriptions(final String id);

    /**
     * Gets the collection of IdentityRiskEvents objects.
     *
     * @return The request builder for the collection of IdentityRiskEvents objects
     */
    IIdentityRiskEventCollectionRequestBuilder getIdentityRiskEvents();

    /**
     * Gets a single IdentityRiskEvents.
     *
     * @param id The id of the IdentityRiskEvents to retrieve.
     * @return The request builder for the IdentityRiskEvents object
     */
    IIdentityRiskEventRequestBuilder getIdentityRiskEvents(final String id);

    /**
     * Gets the collection of ImpossibleTravelRiskEvents objects.
     *
     * @return The request builder for the collection of ImpossibleTravelRiskEvents objects
     */
    IImpossibleTravelRiskEventCollectionRequestBuilder getImpossibleTravelRiskEvents();

    /**
     * Gets a single ImpossibleTravelRiskEvents.
     *
     * @param id The id of the ImpossibleTravelRiskEvents to retrieve.
     * @return The request builder for the ImpossibleTravelRiskEvents object
     */
    IImpossibleTravelRiskEventRequestBuilder getImpossibleTravelRiskEvents(final String id);

    /**
     * Gets the collection of LeakedCredentialsRiskEvents objects.
     *
     * @return The request builder for the collection of LeakedCredentialsRiskEvents objects
     */
    ILeakedCredentialsRiskEventCollectionRequestBuilder getLeakedCredentialsRiskEvents();

    /**
     * Gets a single LeakedCredentialsRiskEvents.
     *
     * @param id The id of the LeakedCredentialsRiskEvents to retrieve.
     * @return The request builder for the LeakedCredentialsRiskEvents object
     */
    ILeakedCredentialsRiskEventRequestBuilder getLeakedCredentialsRiskEvents(final String id);

    /**
     * Gets the collection of AnonymousIpRiskEvents objects.
     *
     * @return The request builder for the collection of AnonymousIpRiskEvents objects
     */
    IAnonymousIpRiskEventCollectionRequestBuilder getAnonymousIpRiskEvents();

    /**
     * Gets a single AnonymousIpRiskEvents.
     *
     * @param id The id of the AnonymousIpRiskEvents to retrieve.
     * @return The request builder for the AnonymousIpRiskEvents object
     */
    IAnonymousIpRiskEventRequestBuilder getAnonymousIpRiskEvents(final String id);

    /**
     * Gets the collection of SuspiciousIpRiskEvents objects.
     *
     * @return The request builder for the collection of SuspiciousIpRiskEvents objects
     */
    ISuspiciousIpRiskEventCollectionRequestBuilder getSuspiciousIpRiskEvents();

    /**
     * Gets a single SuspiciousIpRiskEvents.
     *
     * @param id The id of the SuspiciousIpRiskEvents to retrieve.
     * @return The request builder for the SuspiciousIpRiskEvents object
     */
    ISuspiciousIpRiskEventRequestBuilder getSuspiciousIpRiskEvents(final String id);

    /**
     * Gets the collection of UnfamiliarLocationRiskEvents objects.
     *
     * @return The request builder for the collection of UnfamiliarLocationRiskEvents objects
     */
    IUnfamiliarLocationRiskEventCollectionRequestBuilder getUnfamiliarLocationRiskEvents();

    /**
     * Gets a single UnfamiliarLocationRiskEvents.
     *
     * @param id The id of the UnfamiliarLocationRiskEvents to retrieve.
     * @return The request builder for the UnfamiliarLocationRiskEvents object
     */
    IUnfamiliarLocationRiskEventRequestBuilder getUnfamiliarLocationRiskEvents(final String id);

    /**
     * Gets the collection of MalwareRiskEvents objects.
     *
     * @return The request builder for the collection of MalwareRiskEvents objects
     */
    IMalwareRiskEventCollectionRequestBuilder getMalwareRiskEvents();

    /**
     * Gets a single MalwareRiskEvents.
     *
     * @param id The id of the MalwareRiskEvents to retrieve.
     * @return The request builder for the MalwareRiskEvents object
     */
    IMalwareRiskEventRequestBuilder getMalwareRiskEvents(final String id);

    /**
     * Gets the collection of PrivilegedRoles objects.
     *
     * @return The request builder for the collection of PrivilegedRoles objects
     */
    IPrivilegedRoleCollectionRequestBuilder getPrivilegedRoles();

    /**
     * Gets a single PrivilegedRoles.
     *
     * @param id The id of the PrivilegedRoles to retrieve.
     * @return The request builder for the PrivilegedRoles object
     */
    IPrivilegedRoleRequestBuilder getPrivilegedRoles(final String id);

    /**
     * Gets the collection of PrivilegedRoleAssignments objects.
     *
     * @return The request builder for the collection of PrivilegedRoleAssignments objects
     */
    IPrivilegedRoleAssignmentCollectionRequestBuilder getPrivilegedRoleAssignments();

    /**
     * Gets a single PrivilegedRoleAssignments.
     *
     * @param id The id of the PrivilegedRoleAssignments to retrieve.
     * @return The request builder for the PrivilegedRoleAssignments object
     */
    IPrivilegedRoleAssignmentRequestBuilder getPrivilegedRoleAssignments(final String id);

    /**
     * Gets the collection of PrivilegedOperationEvents objects.
     *
     * @return The request builder for the collection of PrivilegedOperationEvents objects
     */
    IPrivilegedOperationEventCollectionRequestBuilder getPrivilegedOperationEvents();

    /**
     * Gets a single PrivilegedOperationEvents.
     *
     * @param id The id of the PrivilegedOperationEvents to retrieve.
     * @return The request builder for the PrivilegedOperationEvents object
     */
    IPrivilegedOperationEventRequestBuilder getPrivilegedOperationEvents(final String id);

    /**
     * Gets the collection of PrivilegedSignupStatus objects.
     *
     * @return The request builder for the collection of PrivilegedSignupStatus objects
     */
    IPrivilegedSignupStatusCollectionRequestBuilder getPrivilegedSignupStatus();

    /**
     * Gets a single PrivilegedSignupStatus.
     *
     * @param id The id of the PrivilegedSignupStatus to retrieve.
     * @return The request builder for the PrivilegedSignupStatus object
     */
    IPrivilegedSignupStatusRequestBuilder getPrivilegedSignupStatus(final String id);

    /**
     * Gets the collection of Connectors objects.
     *
     * @return The request builder for the collection of Connectors objects
     */
    IConnectorCollectionRequestBuilder getConnectors();

    /**
     * Gets a single Connectors.
     *
     * @param id The id of the Connectors to retrieve.
     * @return The request builder for the Connectors object
     */
    IConnectorRequestBuilder getConnectors(final String id);

    /**
     * Gets the collection of ConnectorGroups objects.
     *
     * @return The request builder for the collection of ConnectorGroups objects
     */
    IConnectorGroupCollectionRequestBuilder getConnectorGroups();

    /**
     * Gets a single ConnectorGroups.
     *
     * @param id The id of the ConnectorGroups to retrieve.
     * @return The request builder for the ConnectorGroups object
     */
    IConnectorGroupRequestBuilder getConnectorGroups(final String id);

    /**
     * Gets the collection of Invitations objects.
     *
     * @return The request builder for the collection of Invitations objects
     */
    IInvitationCollectionRequestBuilder getInvitations();

    /**
     * Gets a single Invitations.
     *
     * @param id The id of the Invitations to retrieve.
     * @return The request builder for the Invitations object
     */
    IInvitationRequestBuilder getInvitations(final String id);

    /**
     * Gets GraphServiceRequestBuilder.
     *
     * @return the User.
     */
    IUserRequestBuilder getMe();

    /**
     * Gets GraphServiceRequestBuilder.
     *
     * @return the Drive.
     */
    IDriveRequestBuilder getDrive();

    /**
     * Gets GraphServiceRequestBuilder.
     *
     * @return the SharePoint.
     */
    ISharePointRequestBuilder getSharePoint();

}
