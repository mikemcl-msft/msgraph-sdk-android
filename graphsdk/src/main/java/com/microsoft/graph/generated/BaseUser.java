// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.generated;

import com.microsoft.graph.concurrency.*;
import com.microsoft.graph.core.*;
import com.microsoft.graph.extensions.*;
import com.microsoft.graph.http.*;
import com.microsoft.graph.generated.*;
import com.microsoft.graph.options.*;
import com.microsoft.graph.serializer.*;

import java.util.Arrays;
import java.util.List;

import com.google.gson.JsonObject;
import com.google.gson.annotations.*;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Base User.
 */
public class BaseUser extends DirectoryObject implements IJsonBackedObject {


    public BaseUser() {
        oDataType = "microsoft.graph.user";
    }

    /**
     * The Account Enabled.
     */
    @SerializedName("accountEnabled")
    public Boolean accountEnabled;

    /**
     * The Assigned Licenses.
     */
    @SerializedName("assignedLicenses")
    public List<AssignedLicense> assignedLicenses;

    /**
     * The Assigned Plans.
     */
    @SerializedName("assignedPlans")
    public List<AssignedPlan> assignedPlans;

    /**
     * The Business Phones.
     */
    @SerializedName("businessPhones")
    public List<String> businessPhones;

    /**
     * The City.
     */
    @SerializedName("city")
    public String city;

    /**
     * The Company Name.
     */
    @SerializedName("companyName")
    public String companyName;

    /**
     * The Country.
     */
    @SerializedName("country")
    public String country;

    /**
     * The Department.
     */
    @SerializedName("department")
    public String department;

    /**
     * The Display Name.
     */
    @SerializedName("displayName")
    public String displayName;

    /**
     * The Given Name.
     */
    @SerializedName("givenName")
    public String givenName;

    /**
     * The Job Title.
     */
    @SerializedName("jobTitle")
    public String jobTitle;

    /**
     * The Mail.
     */
    @SerializedName("mail")
    public String mail;

    /**
     * The Mail Nickname.
     */
    @SerializedName("mailNickname")
    public String mailNickname;

    /**
     * The Mobile Phone.
     */
    @SerializedName("mobilePhone")
    public String mobilePhone;

    /**
     * The On Premises Immutable Id.
     */
    @SerializedName("onPremisesImmutableId")
    public String onPremisesImmutableId;

    /**
     * The On Premises Last Sync Date Time.
     */
    @SerializedName("onPremisesLastSyncDateTime")
    public java.util.Calendar onPremisesLastSyncDateTime;

    /**
     * The On Premises Security Identifier.
     */
    @SerializedName("onPremisesSecurityIdentifier")
    public String onPremisesSecurityIdentifier;

    /**
     * The On Premises Sync Enabled.
     */
    @SerializedName("onPremisesSyncEnabled")
    public Boolean onPremisesSyncEnabled;

    /**
     * The Password Policies.
     */
    @SerializedName("passwordPolicies")
    public String passwordPolicies;

    /**
     * The Password Profile.
     */
    @SerializedName("passwordProfile")
    public PasswordProfile passwordProfile;

    /**
     * The Office Location.
     */
    @SerializedName("officeLocation")
    public String officeLocation;

    /**
     * The Postal Code.
     */
    @SerializedName("postalCode")
    public String postalCode;

    /**
     * The Preferred Language.
     */
    @SerializedName("preferredLanguage")
    public String preferredLanguage;

    /**
     * The Provisioned Plans.
     */
    @SerializedName("provisionedPlans")
    public List<ProvisionedPlan> provisionedPlans;

    /**
     * The Proxy Addresses.
     */
    @SerializedName("proxyAddresses")
    public List<String> proxyAddresses;

    /**
     * The State.
     */
    @SerializedName("state")
    public String state;

    /**
     * The Street Address.
     */
    @SerializedName("streetAddress")
    public String streetAddress;

    /**
     * The Surname.
     */
    @SerializedName("surname")
    public String surname;

    /**
     * The Usage Location.
     */
    @SerializedName("usageLocation")
    public String usageLocation;

    /**
     * The User Principal Name.
     */
    @SerializedName("userPrincipalName")
    public String userPrincipalName;

    /**
     * The User Type.
     */
    @SerializedName("userType")
    public String userType;

    /**
     * The Mailbox Settings.
     */
    @SerializedName("mailboxSettings")
    public MailboxSettings mailboxSettings;

    /**
     * The About Me.
     */
    @SerializedName("aboutMe")
    public String aboutMe;

    /**
     * The Birthday.
     */
    @SerializedName("birthday")
    public java.util.Calendar birthday;

    /**
     * The Hire Date.
     */
    @SerializedName("hireDate")
    public java.util.Calendar hireDate;

    /**
     * The Interests.
     */
    @SerializedName("interests")
    public List<String> interests;

    /**
     * The My Site.
     */
    @SerializedName("mySite")
    public String mySite;

    /**
     * The Past Projects.
     */
    @SerializedName("pastProjects")
    public List<String> pastProjects;

    /**
     * The Preferred Name.
     */
    @SerializedName("preferredName")
    public String preferredName;

    /**
     * The Responsibilities.
     */
    @SerializedName("responsibilities")
    public List<String> responsibilities;

    /**
     * The Schools.
     */
    @SerializedName("schools")
    public List<String> schools;

    /**
     * The Skills.
     */
    @SerializedName("skills")
    public List<String> skills;

    /**
     * The Owned Devices.
     */
    public transient DirectoryObjectCollectionPage ownedDevices;

    /**
     * The Registered Devices.
     */
    public transient DirectoryObjectCollectionPage registeredDevices;

    /**
     * The Manager.
     */
    @SerializedName("manager")
    public DirectoryObject manager;

    /**
     * The Direct Reports.
     */
    public transient DirectoryObjectCollectionPage directReports;

    /**
     * The Member Of.
     */
    public transient DirectoryObjectCollectionPage memberOf;

    /**
     * The Created Objects.
     */
    public transient DirectoryObjectCollectionPage createdObjects;

    /**
     * The Owned Objects.
     */
    public transient DirectoryObjectCollectionPage ownedObjects;

    /**
     * The Messages.
     */
    public transient MessageCollectionPage messages;

    /**
     * The Joined Groups.
     */
    public transient GroupCollectionPage joinedGroups;

    /**
     * The Mail Folders.
     */
    public transient MailFolderCollectionPage mailFolders;

    /**
     * The Calendar.
     */
    @SerializedName("calendar")
    public Calendar calendar;

    /**
     * The Calendars.
     */
    public transient CalendarCollectionPage calendars;

    /**
     * The Calendar Groups.
     */
    public transient CalendarGroupCollectionPage calendarGroups;

    /**
     * The Calendar View.
     */
    public transient EventCollectionPage calendarView;

    /**
     * The Events.
     */
    public transient EventCollectionPage events;

    /**
     * The People.
     */
    public transient PersonCollectionPage people;

    /**
     * The Contacts.
     */
    public transient ContactCollectionPage contacts;

    /**
     * The Contact Folders.
     */
    public transient ContactFolderCollectionPage contactFolders;

    /**
     * The Inference Classification.
     */
    @SerializedName("inferenceClassification")
    public InferenceClassification inferenceClassification;

    /**
     * The Photo.
     */
    @SerializedName("photo")
    public ProfilePhoto photo;

    /**
     * The Photos.
     */
    public transient ProfilePhotoCollectionPage photos;

    /**
     * The Drive.
     */
    @SerializedName("drive")
    public Drive drive;

    /**
     * The Insights.
     */
    @SerializedName("insights")
    public OfficeGraphInsights insights;

    /**
     * The Trending Around.
     */
    public transient DriveItemCollectionPage trendingAround;

    /**
     * The Working With.
     */
    public transient UserCollectionPage workingWith;

    /**
     * The Tasks.
     */
    public transient TaskCollectionPage tasks;

    /**
     * The Plans.
     */
    public transient PlanCollectionPage plans;

    /**
     * The Notes.
     */
    @SerializedName("notes")
    public Notes notes;


    /**
     * The raw representation of this class
     */
    private transient JsonObject mRawObject;

    /**
     * The serializer
     */
    private transient ISerializer mSerializer;

    /**
     * Gets the raw representation of this class
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return mRawObject;
    }

    /**
     * Gets serializer
     * @return the serializer
     */
    protected ISerializer getSerializer() {
        return mSerializer;
    }

    /**
     * Sets the raw json object
     *
     * @param serializer The serializer
     * @param json The json object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        mSerializer = serializer;
        mRawObject = json;


        if (json.has("ownedDevices")) {
            final BaseDirectoryObjectCollectionResponse response = new BaseDirectoryObjectCollectionResponse();
            if (json.has("ownedDevices@odata.nextLink")) {
                response.nextLink = json.get("ownedDevices@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("ownedDevices").toString(), JsonObject[].class);
            final DirectoryObject[] array = new DirectoryObject[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), DirectoryObject.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            ownedDevices = new DirectoryObjectCollectionPage(response, null);
        }

        if (json.has("registeredDevices")) {
            final BaseDirectoryObjectCollectionResponse response = new BaseDirectoryObjectCollectionResponse();
            if (json.has("registeredDevices@odata.nextLink")) {
                response.nextLink = json.get("registeredDevices@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("registeredDevices").toString(), JsonObject[].class);
            final DirectoryObject[] array = new DirectoryObject[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), DirectoryObject.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            registeredDevices = new DirectoryObjectCollectionPage(response, null);
        }

        if (json.has("directReports")) {
            final BaseDirectoryObjectCollectionResponse response = new BaseDirectoryObjectCollectionResponse();
            if (json.has("directReports@odata.nextLink")) {
                response.nextLink = json.get("directReports@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("directReports").toString(), JsonObject[].class);
            final DirectoryObject[] array = new DirectoryObject[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), DirectoryObject.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            directReports = new DirectoryObjectCollectionPage(response, null);
        }

        if (json.has("memberOf")) {
            final BaseDirectoryObjectCollectionResponse response = new BaseDirectoryObjectCollectionResponse();
            if (json.has("memberOf@odata.nextLink")) {
                response.nextLink = json.get("memberOf@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("memberOf").toString(), JsonObject[].class);
            final DirectoryObject[] array = new DirectoryObject[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), DirectoryObject.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            memberOf = new DirectoryObjectCollectionPage(response, null);
        }

        if (json.has("createdObjects")) {
            final BaseDirectoryObjectCollectionResponse response = new BaseDirectoryObjectCollectionResponse();
            if (json.has("createdObjects@odata.nextLink")) {
                response.nextLink = json.get("createdObjects@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("createdObjects").toString(), JsonObject[].class);
            final DirectoryObject[] array = new DirectoryObject[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), DirectoryObject.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            createdObjects = new DirectoryObjectCollectionPage(response, null);
        }

        if (json.has("ownedObjects")) {
            final BaseDirectoryObjectCollectionResponse response = new BaseDirectoryObjectCollectionResponse();
            if (json.has("ownedObjects@odata.nextLink")) {
                response.nextLink = json.get("ownedObjects@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("ownedObjects").toString(), JsonObject[].class);
            final DirectoryObject[] array = new DirectoryObject[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), DirectoryObject.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            ownedObjects = new DirectoryObjectCollectionPage(response, null);
        }

        if (json.has("messages")) {
            final BaseMessageCollectionResponse response = new BaseMessageCollectionResponse();
            if (json.has("messages@odata.nextLink")) {
                response.nextLink = json.get("messages@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("messages").toString(), JsonObject[].class);
            final Message[] array = new Message[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Message.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            messages = new MessageCollectionPage(response, null);
        }

        if (json.has("joinedGroups")) {
            final BaseGroupCollectionResponse response = new BaseGroupCollectionResponse();
            if (json.has("joinedGroups@odata.nextLink")) {
                response.nextLink = json.get("joinedGroups@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("joinedGroups").toString(), JsonObject[].class);
            final Group[] array = new Group[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Group.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            joinedGroups = new GroupCollectionPage(response, null);
        }

        if (json.has("mailFolders")) {
            final BaseMailFolderCollectionResponse response = new BaseMailFolderCollectionResponse();
            if (json.has("mailFolders@odata.nextLink")) {
                response.nextLink = json.get("mailFolders@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("mailFolders").toString(), JsonObject[].class);
            final MailFolder[] array = new MailFolder[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), MailFolder.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            mailFolders = new MailFolderCollectionPage(response, null);
        }

        if (json.has("calendars")) {
            final BaseCalendarCollectionResponse response = new BaseCalendarCollectionResponse();
            if (json.has("calendars@odata.nextLink")) {
                response.nextLink = json.get("calendars@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("calendars").toString(), JsonObject[].class);
            final Calendar[] array = new Calendar[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Calendar.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            calendars = new CalendarCollectionPage(response, null);
        }

        if (json.has("calendarGroups")) {
            final BaseCalendarGroupCollectionResponse response = new BaseCalendarGroupCollectionResponse();
            if (json.has("calendarGroups@odata.nextLink")) {
                response.nextLink = json.get("calendarGroups@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("calendarGroups").toString(), JsonObject[].class);
            final CalendarGroup[] array = new CalendarGroup[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), CalendarGroup.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            calendarGroups = new CalendarGroupCollectionPage(response, null);
        }

        if (json.has("calendarView")) {
            final BaseEventCollectionResponse response = new BaseEventCollectionResponse();
            if (json.has("calendarView@odata.nextLink")) {
                response.nextLink = json.get("calendarView@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("calendarView").toString(), JsonObject[].class);
            final Event[] array = new Event[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Event.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            calendarView = new EventCollectionPage(response, null);
        }

        if (json.has("events")) {
            final BaseEventCollectionResponse response = new BaseEventCollectionResponse();
            if (json.has("events@odata.nextLink")) {
                response.nextLink = json.get("events@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("events").toString(), JsonObject[].class);
            final Event[] array = new Event[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Event.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            events = new EventCollectionPage(response, null);
        }

        if (json.has("people")) {
            final BasePersonCollectionResponse response = new BasePersonCollectionResponse();
            if (json.has("people@odata.nextLink")) {
                response.nextLink = json.get("people@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("people").toString(), JsonObject[].class);
            final Person[] array = new Person[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Person.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            people = new PersonCollectionPage(response, null);
        }

        if (json.has("contacts")) {
            final BaseContactCollectionResponse response = new BaseContactCollectionResponse();
            if (json.has("contacts@odata.nextLink")) {
                response.nextLink = json.get("contacts@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("contacts").toString(), JsonObject[].class);
            final Contact[] array = new Contact[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Contact.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            contacts = new ContactCollectionPage(response, null);
        }

        if (json.has("contactFolders")) {
            final BaseContactFolderCollectionResponse response = new BaseContactFolderCollectionResponse();
            if (json.has("contactFolders@odata.nextLink")) {
                response.nextLink = json.get("contactFolders@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("contactFolders").toString(), JsonObject[].class);
            final ContactFolder[] array = new ContactFolder[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), ContactFolder.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            contactFolders = new ContactFolderCollectionPage(response, null);
        }

        if (json.has("photos")) {
            final BaseProfilePhotoCollectionResponse response = new BaseProfilePhotoCollectionResponse();
            if (json.has("photos@odata.nextLink")) {
                response.nextLink = json.get("photos@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("photos").toString(), JsonObject[].class);
            final ProfilePhoto[] array = new ProfilePhoto[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), ProfilePhoto.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            photos = new ProfilePhotoCollectionPage(response, null);
        }

        if (json.has("trendingAround")) {
            final BaseDriveItemCollectionResponse response = new BaseDriveItemCollectionResponse();
            if (json.has("trendingAround@odata.nextLink")) {
                response.nextLink = json.get("trendingAround@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("trendingAround").toString(), JsonObject[].class);
            final DriveItem[] array = new DriveItem[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), DriveItem.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            trendingAround = new DriveItemCollectionPage(response, null);
        }

        if (json.has("workingWith")) {
            final BaseUserCollectionResponse response = new BaseUserCollectionResponse();
            if (json.has("workingWith@odata.nextLink")) {
                response.nextLink = json.get("workingWith@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("workingWith").toString(), JsonObject[].class);
            final User[] array = new User[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), User.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            workingWith = new UserCollectionPage(response, null);
        }

        if (json.has("tasks")) {
            final BaseTaskCollectionResponse response = new BaseTaskCollectionResponse();
            if (json.has("tasks@odata.nextLink")) {
                response.nextLink = json.get("tasks@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("tasks").toString(), JsonObject[].class);
            final Task[] array = new Task[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Task.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            tasks = new TaskCollectionPage(response, null);
        }

        if (json.has("plans")) {
            final BasePlanCollectionResponse response = new BasePlanCollectionResponse();
            if (json.has("plans@odata.nextLink")) {
                response.nextLink = json.get("plans@odata.nextLink").getAsString();
            }

            final JsonObject[] sourceArray = serializer.deserializeObject(json.get("plans").toString(), JsonObject[].class);
            final Plan[] array = new Plan[sourceArray.length];
            for (int i = 0; i < sourceArray.length; i++) {
                array[i] = serializer.deserializeObject(sourceArray[i].toString(), Plan.class);
                array[i].setRawObject(serializer, sourceArray[i]);
            }
            response.value = Arrays.asList(array);
            plans = new PlanCollectionPage(response, null);
        }
    }
}
